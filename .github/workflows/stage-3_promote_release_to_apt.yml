name: "Stage 3 - Promote Release package to APT Stores"

on:
  release:

jobs:
  print_context:
    runs-on: ubuntu-latest
    steps:
      - name: Dump Inputs context
        env:
          INPUTS_CONTEXT: ${{ toJson(inputs) }}
        run: echo "$INPUTS_CONTEXT"
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

      - name: Show default environment variables
        run: |
          echo "The job_id is: $GITHUB_JOB"   # reference the default environment variables
          echo "The id of this action is: $GITHUB_ACTION"   # reference the default environment variables
          echo "The run id is: $GITHUB_RUN_ID"
          echo "The GitHub Actor's username is: $GITHUB_ACTOR"
          echo "GitHub SHA: $GITHUB_SHA"

  tag:
    name: Release Tag
    if: ${{ github.event.release.prerelease == false }} && ${{ github.event.release.draft == false }} && ${{ github.event.action == 'released' }}
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get Release Tag
        id: get_version
        uses: jannemattila/get-version-from-tag@v3
      - name: Tag Info
        run: |
          echo "Release Tag: ${{github.ref}}"
          echo "Latest Tag: ${{ steps.get_version.outputs.version }}"
      - name: Tag Info Matches
        if: endsWith(github.ref, steps.get_version.outputs.version )
        run: |
          echo Latest Tag matches Release tag
      - name: Tag Info Doesn't Match
        if: ${{ !endsWith(github.ref, steps.get_version.outputs.version ) }}
        run: |
          echo Latest Tag does not matches Release tag
          exit 1

  release_type:
    name: Release Type
    needs: tag
    runs-on: ubuntu-latest
    outputs:
      release_type: ${{ steps.stable_release.outputs.release_type || steps.test_release.outputs.release_type }}
    steps:
      - name: Release Type - stable
        id: stable_release
        if: ${{ github.event.release.prerelease == false }}
        run: |
          echo "release_type=stable" >> "$GITHUB_OUTPUT"
      - name: Release Type - test
        id: test_release
        if: ${{ github.event.release.prerelease == true }}
        run: |
          echo "release_type=test" >> "$GITHUB_OUTPUT"

  update-apt-repo:
    name: Publish to Repo
    needs: [tag, release_type]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Get the release
      id: get_release
      uses: cardinalby/git-get-release-action@1.2.2
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        tag: v${{ needs.tag.outputs.version }}

    - name: Download release assets
      uses: dsaltares/fetch-gh-release-asset@0.0.8
      with:
        version: ${{ steps.get_release.outputs.id }}
        regex: true
        file: "homebridge.*\\.deb"
        target: "repo/"
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Import GPG key
      id: import_gpg
      uses: crazy-max/ghaction-import-gpg@v4
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.GPG_PASSPHRASE }}

    - name: Install deb-s3
      run: |
        curl -sLO https://github.com/deb-s3/deb-s3/releases/download/0.11.3/deb-s3-0.11.3.gem
        sudo gem install deb-s3-0.11.3.gem

    - name: Update Repo
      run: |
        sudo chown -R $USER: repo/
        deb-s3 upload \
          --codename=${{ needs.release_type.outputs.release_type }} \
          --preserve-versions \
          --s3-region=us-west-2 \
          --bucket repo.homebridge.io \
          --access-key-id=${{ secrets.AWS_ACCESS_KEY_ID }} \
          --secret-access-key=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
          --sign=${{ secrets.GPG_KEY_ID }} \
          repo/*.deb

  purge_cloudflare_cache:
    name: Clear Cache
    needs: update-apt-repo
    uses: ./.github/workflows/purge-cf-cache.yml
    secrets:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}

  github-releases-to-discord:
    name: Discord Webhooks
    needs: [tag,release_type,update-apt-repo,purge_cloudflare_cache]
    uses: homebridge/.github/.github/workflows/discord-webhooks.yml@latest
    with:
      title: "Homebridge APT Package Release"
      description: |
        Version `v${{ needs.tag.outputs.version }}`
      url: "https://github.com/homebridge/homebridge-apt-pkg/releases/tag/v${{ needs.tag.outputs.version }}"
    secrets:
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL_LATEST }}
