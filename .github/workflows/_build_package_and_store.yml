name: "z Build Package and Store in Latest Release"

on: 
  workflow_call:
    inputs:
      version:
        type: string
        description: 'The version of the release'
        required: true
        default: 'v0.0.0'
      release_type:
        type: string
        description: 'The type of release'
        required: false
        default: 'stable'
      release_id:
        type: string
        description: 'The release id'
        required: true

jobs:

  print_context:
    runs-on: ubuntu-latest
    steps:
      - name: Dump Inputs context
        env:
          INPUTS_CONTEXT: ${{ toJson(inputs) }}
        run: echo "$INPUTS_CONTEXT"
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

      - name: Show default environment variables
        run: |
          echo "The job_id is: $GITHUB_JOB"   # reference the default environment variables
          echo "The id of this action is: $GITHUB_ACTION"   # reference the default environment variables
          echo "The run id is: $GITHUB_RUN_ID"
          echo "The GitHub Actor's username is: $GITHUB_ACTOR"
          echo "GitHub SHA: $GITHUB_SHA"


  build:
    name: Build Packages for (${{ matrix.name }}) v${{ inputs.version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        name: [
          debian-x86_64,
          debian-arm32v6,
          debian-arm64v8,
        ]
        include: 
          - name: debian-x86_64
            os: ubuntu-latest
            BASE_IMAGE: library/debian:bullseye
            QEMU_ARCH: x86_64

          - name: debian-arm32v6
            os: ubuntu-latest
            BASE_IMAGE: balenalib/raspberry-pi-debian:bullseye
            QEMU_ARCH: arm

          - name: debian-arm64v8
            os: ubuntu-latest
            BASE_IMAGE: arm64v8/debian:bullseye
            QEMU_ARCH: aarch64

    steps: 
    - uses: actions/checkout@v4

    - name: Linux - Setup Dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get --yes --no-install-recommends install binfmt-support qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static:register --reset

    - name: Linux - Build Docker Image
      if: runner.os == 'Linux'
      run: |
        docker build -f build/Dockerfile --build-arg BASE_IMAGE=${{ matrix.BASE_IMAGE }} --build-arg QEMU_ARCH=${{ matrix.QEMU_ARCH }} -t package-build --platform=linux/${{ matrix.QEMU_ARCH }} .

    - name: Linux - Build Package
      if: runner.os == 'Linux'
      run: |
        docker run --rm -v $(pwd):/repo -e PKG_RELEASE_TYPE="${{ inputs.release_type }}" -e PKG_RELEASE_VERSION="${{ inputs.version }}" package-build

    - name: Rename package to include v
      run: |
        UPDATED=$(ls homebridge*.deb | sed -e 's/homebridge_/homebridge_v/g')
        mv homebridge_*.deb ${UPDATED}

    - name: Rename manifest to include v
      run: |
        UPDATED=$(ls homebridge*.manifest | sed -e 's/homebridge_/homebridge_v/g')
        mv homebridge_*.manifest ${UPDATED}

    - name: Set variables
      run: |
        echo BODY_FILE="$(ls *.manifest)" >> $GITHUB_ENV

    - name: update release
      uses: tubone24/update_release@v1.3.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAG_NAME: v${{ inputs.version }}
        RELEASE_ID: ${{ inputs.release_id }}
      with:
        is_append_body: "Contents of ${{ matrix.QEMU_ARCH }} Package." 


    - name: update release
      uses: tubone24/update_release@v1.3.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAG_NAME: v${{ inputs.version }}
        RELEASE_ID: ${{ inputs.release_id }}
      with:
        body_path: ${{ env.BODY_FILE }}

    - uses: AButler/upload-release-assets@v3.0
      with:
        files: '*.deb;*.manifest'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        release-id: v${{ inputs.release_id }}