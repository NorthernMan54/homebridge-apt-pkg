name: "Stage 1 - Create a pre-release and build APT package"

on:
  workflow_dispatch:
  push:
    branches:
      - latest
    paths:
      - package.json

jobs:
  merge_inputs:
    # allows for both the workflow_dispatch and push events to trigger this job
    runs-on: ubuntu-latest
    outputs: 
      username: ${{ steps.merge_inputs.outputs.username }}
    steps:
      - name: Merge Inputs
        id: merge_inputs
        run: |
          if [ "${{ github.event.head_commit.author.username }}" ]; then
            USERNAME=${{ github.event.head_commit.author.username }}
          else
            USERNAME='NorthernMan54'
          fi
          echo "Using USERNAME: $USERNAME"
          echo "username=$USERNAME" >> "$GITHUB_OUTPUT"

  if_merged:
    # Only run this job if the username is NorthernMan54
    needs: merge_inputs
    if: ${{ needs.merge_inputs.outputs.username == 'NorthernMan54' }}
    permissions:
      # write permission is required to create a github release
      contents: write
      # write permission is required for autolabeler
      # otherwise, read permission is required at least
      pull-requests: write
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      release_id: ${{ steps.drafter.outputs.id }}
      release_type: 'stable'
    steps:
    - uses: release-drafter/release-drafter@v6
      id: drafter
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Remove V from the version tag
      id: extract_version
      run: |
        echo "The tag name is: ${{ steps.drafter.outputs.tag_name }}"
        PROCESSED_VERSION=$(echo "${{ steps.drafter.outputs.tag_name }}" | sed 's/^v//') # Remove 'v'
        echo "version=$PROCESSED_VERSION" >> "$GITHUB_OUTPUT"

  build_package_and_store:
    needs: [if_merged]
    name: Build Packages for (${{ matrix.name }}) v${{ needs.if_merged.outputs.version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        name: [
          debian-x86_64,
          debian-arm32v6,
          debian-arm64v8,
        ]
        include: 
          - name: debian-x86_64
            os: ubuntu-latest
            BASE_IMAGE: library/debian:bullseye
            QEMU_ARCH: x86_64

          - name: debian-arm32v6
            os: ubuntu-latest
            BASE_IMAGE: balenalib/raspberry-pi-debian:bullseye
            QEMU_ARCH: arm

          - name: debian-arm64v8
            os: ubuntu-latest
            BASE_IMAGE: arm64v8/debian:bullseye
            QEMU_ARCH: aarch64

    steps: 
    - uses: actions/checkout@v4

    - name: Linux - Setup Dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get --yes --no-install-recommends install binfmt-support qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static:register --reset

    - name: Linux - Build Docker Image
      if: runner.os == 'Linux'
      run: |
        docker build -f build/Dockerfile --build-arg BASE_IMAGE=${{ matrix.BASE_IMAGE }} --build-arg QEMU_ARCH=${{ matrix.QEMU_ARCH }} -t package-build --platform=linux/${{ matrix.QEMU_ARCH }} .

    - name: Linux - Build Package
      if: runner.os == 'Linux'
      run: |
        docker run --rm -v $(pwd):/repo -e PKG_RELEASE_TYPE="${{ needs.if_merged.outputs.release_type }}" -e PKG_RELEASE_VERSION="${{ needs.if_merged.outputs.version }}" package-build

    - name: Rename package to include v
      run: |
        UPDATED=$(ls homebridge*.deb | sed -e 's/homebridge_/homebridge_v/g')
        mv homebridge_*.deb ${UPDATED}

    - name: Rename manifest to include v
      run: |
        UPDATED=$(ls homebridge*.manifest | sed -e 's/homebridge_/homebridge_v/g')
        mv homebridge_*.manifest ${UPDATED}

    - name: Set variables
      run: |
        echo BODY_FILE="$(ls *.manifest)" >> $GITHUB_ENV

    - name: update release
      uses: tubone24/update_release@v1.3.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAG_NAME: v${{ needs.if_merged.outputs.version }}
        RELEASE_ID: ${{ needs.if_merged.outputs.release_id }}
      with:
        is_append_body: "Contents of ${{ matrix.QEMU_ARCH }} Package." 


    - name: update release
      uses: tubone24/update_release@v1.3.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAG_NAME: v${{ needs.if_merged.outputs.version }}
        RELEASE_ID: ${{ needs.if_merged.outputs.release_id }}
      with:
        body_path: ${{ env.BODY_FILE }}

    - uses: AButler/upload-release-assets@v3.0
      with:
        files: '*.deb;*.manifest'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        release-id: ${{ needs.if_merged.outputs.release_id }}

  prerelease:
    # Publish the pre-release to the GitHub Releases page
    needs: [build_package_and_store]
    runs-on: ubuntu-latest
    steps:
      - uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.if_merged.outputs.release_id }}

  print_context:
    runs-on: ubuntu-latest
    steps:
      - name: Dump Inputs context
        env:
          INPUTS_CONTEXT: ${{ toJson(inputs) }}
        run: echo "$INPUTS_CONTEXT"
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

      - name: Show default environment variables
        run: |
          echo "The job_id is: $GITHUB_JOB"   # reference the default environment variables
          echo "The id of this action is: $GITHUB_ACTION"   # reference the default environment variables
          echo "The run id is: $GITHUB_RUN_ID"
          echo "The GitHub Actor's username is: $GITHUB_ACTOR"
          echo "GitHub SHA: $GITHUB_SHA"