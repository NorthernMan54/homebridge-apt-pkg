name: "Build Package and Store in Latest Release"
on: workflow_call

jobs:
  tag:
    name: Release Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get Release Tag
        id: get_version
        uses: jannemattila/get-version-from-tag@v3
      - name: Tag Info
        run: |
          echo "Release Tag: ${{github.ref}}"
          echo "Latest Tag: ${{ steps.get_version.outputs.version }}"
      - name: Tag Info Matches
        if: endsWith(github.ref, steps.get_version.outputs.version )
        run: |
          echo Latest Tag matches Release tag
      - name: Tag Info Doesn't Match
        if: ${{ !endsWith(github.ref, steps.get_version.outputs.version ) }}
        run: |
          echo Latest Tag does not matches Release tag
          exit 1

  release_type:
    name: Release Type
    needs: tag
    runs-on: ubuntu-latest
    outputs:
      release_type: ${{ steps.stable_release.outputs.release_type || steps.test_release.outputs.release_type }}
    steps:
      - name: Release Type - stable
        id: stable_release
        if: ${{ github.event.release.prerelease == false }}
        run: |
          echo "release_type=stable" >> "$GITHUB_OUTPUT"
      - name: Release Type - test
        id: test_release
        if: ${{ github.event.release.prerelease == true }}
        run: |
          echo "release_type=test" >> "$GITHUB_OUTPUT"


  build:
    needs: [tag, release_type]
    name: Build Packages for (${{ matrix.name }}) v${{ needs.tag.outputs.version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        name: [
          debian-x86_64,
          debian-arm32v6,
          debian-arm64v8,
        ]
        include: 
          - name: debian-x86_64
            os: ubuntu-latest
            BASE_IMAGE: library/debian:bullseye
            QEMU_ARCH: x86_64

          - name: debian-arm32v6
            os: ubuntu-latest
            BASE_IMAGE: balenalib/raspberry-pi-debian:bullseye
            QEMU_ARCH: arm

          - name: debian-arm64v8
            os: ubuntu-latest
            BASE_IMAGE: arm64v8/debian:bullseye
            QEMU_ARCH: aarch64

    steps: 
    - uses: actions/checkout@v4

    - name: Linux - Setup Dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get --yes --no-install-recommends install binfmt-support qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static:register --reset

    - name: Linux - Build Docker Image
      if: runner.os == 'Linux'
      run: |
        docker build -f build/Dockerfile --build-arg BASE_IMAGE=${{ matrix.BASE_IMAGE }} --build-arg QEMU_ARCH=${{ matrix.QEMU_ARCH }} -t package-build .

    - name: Linux - Build Package
      if: runner.os == 'Linux'
      run: |
        docker run --rm -v $(pwd):/repo -e PKG_RELEASE_TYPE="${{ needs.release_type.outputs.release_type }}" -e PKG_RELEASE_VERSION="${{ needs.tag.outputs.version }}" package-build

    - name: Rename package to include v
      run: |
        UPDATED=$(ls homebridge*.deb | sed -e 's/homebridge_/homebridge_v/g')
        mv homebridge_*.deb ${UPDATED}

    - name: Rename manifest to include v
      run: |
        UPDATED=$(ls homebridge*.manifest | sed -e 's/homebridge_/homebridge_v/g')
        mv homebridge_*.manifest ${UPDATED}

    - name: Set variables
      run: |
        echo BODY_FILE="$(ls *.manifest)" >> $GITHUB_ENV

    - name: update release
      uses: tubone24/update_release@v1.3.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAG_NAME: v${{ needs.tag.outputs.version }}
      with:
        is_append_body: "Contents of ${{ matrix.QEMU_ARCH }} Package." 

    - name: update release
      uses: tubone24/update_release@v1.3.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAG_NAME: v${{ needs.tag.outputs.version }}
      with:
        body_path: ${{ env.BODY_FILE }}

    - uses: AButler/upload-release-assets@v2.0.2
      with:
        files: '*.deb;*.manifest'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        release-tag: v${{ needs.tag.outputs.version }}